# Enable ModSecurity, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
SecRuleEngine On

# -- Request body handling ---------------------------------------------------

# Allow ModSecurity to access request bodies. If you don't, ModSecurity
# won't be able to see any POST parameters, which opens a large security
# hole for attackers to exploit.
#
SecRequestBodyAccess On

# -- DVWA Attack Handling -----------------------------------------------------
###CSRF
SecRule REQUEST_LINE "@contains password_new" "chain,id:1000,phase:1,t:none,t:urlDecode,t:lowercase,deny,status:500,msg:'Access denied.'"
SecRule &REQUEST_HEADERS:Referer "@eq 0" "id:1001,t:none"

###COMMAND INJECTION
SecRule ARGS:ip "@rx [\&\;\|\-\$\(\)'\|]+" "id:1002,phase:2,t:none,t:urlDecodeUni,t:lowercase,deny,status:500,msg:'Command Injection Attack'"

###File Inclusion
SecRule ARGS "@contains ../" "id:1004,phase:2,deny,t:none,t:urlDecodeUni,t:lowercase,status:500,msg:'File Inclusion'"

###FILE UPLOAD
SecRule MULTIPART_FILENAME "!@rx (png|jpe?g)$" "id:1005,phase:2,t:none,t:urlDecodeUni,t:lowercase,deny,status:500"

###SQLi
SecRule ARGS "@detectSQLi" "id:1006,phase:2,t:none,t:urlDecodeUni,log,deny,status:500,msg:'SQL Injection'"

###XSS
SecRule ARGS "@detectXSS" "id:1009,phase:2,log,deny,status:500,msg:'XSS'"

###BRUTE FORCE
SecRule IP:BRUTE_FORCE_BLOCK "@eq 1" "phase:1,id:'981036',t:none,deny,status:500,msg:'Brute Force Attack',skipAfter:END_BRUTE_FORCE_PROTECTION_CHECKS"

SecAction "phase:5,id:'981041',t:none,nolog,pass,setvar:ip.brute_force_counter=+1"

SecRule IP:BRUTE_FORCE_COUNTER "@gt 30" "phase:5,id:'981042',t:none,nolog,pass,setvar:ip.brute_force_burst_counter=+1,expirevar:ip.brute_force_burst_counte>

SecRule IP:BRUTE_FORCE_BURST_COUNTER "@ge 2" "phase:5,id:'981043',t:none,nolog,pass,msg:'Potential Brute Force Attack',setvar:ip.brute_force_block=1,expire>

SecMarker END_BRUTE_FORCE_PROTECTION_CHECKS

# -- Audit log configuration -------------------------------------------------

# The SecAuditEngine directive is used to configure the audit engine, which
# logs complete transactions. ModSecurity is currently able to log most, but
# not all transactions. Transactions involving errors (e.g., 400 and 404
# transactions) use a different execution path, which ModSecurity does not
# support.
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"

# Log everything we know about a transaction.
SecAuditLogParts ABCEFZ

# Use a single file for logging. This is much easier to look at, but
# assumes that you will use the audit log only ocassionally.
#
SecAuditLogType Serial
SecAuditLog /var/log/modsec_dvwa_audit.log